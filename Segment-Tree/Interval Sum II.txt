Question: Given an integer array in the construct method, implement two methods query(start, end) and modify(index, value):

For query(start, end), return the sum from index start to index end in the given array.
For modify(index, value), modify the number in the given index to value

Example
Given array A = [1,2,7,8,5].

query(0, 2), return 10.
modify(0, 4), change A[0] from 1 to 4.
query(0, 1), return 6.
modify(2, 1), change A[2] from 7 to 1.
query(2, 4), return 14.

public class Solution {
     
    private SegmentTree root;
    public Solution(int[] A) {
        if(A == null || A.length == 0) return;
        root = buildTree(A, 0, A.length - 1);
    }
    
    public long query(int start, int end) {
        if(start > end) return 0l;
        return query(root, start, end);
    }
    
    public long query(SegmentTree root, int start, int end){
        if(root.start == start && root.end == end){
            return root.sum;
        }
        int mid = (root.start + root.end) / 2;
        if(end <= mid){
            return query(root.left, start, end);
        }else if(start > mid){
            return query(root.right, start, end);
        }else{
            return query(root.left, start, mid) + query(root.right, mid + 1, end);
        }
    }
    
    public void modify(int index, int value) {
        modify(root, index, value);
    }
    
    public void modify(SegmentTree root, int index, int value){
        if(root.start == index && root.end == index){
            root.sum = value;
            return;
        }
        int mid = (root.start + root.end) / 2;
        if(index <= mid){
            modify(root.left, index, value);
        }else{
            modify(root.right, index, value);
        }
        root.sum = root.left.sum + root.right.sum;
    }
    
    public SegmentTree buildTree(int[] nums, int start, int end){
        if(start == end){
            SegmentTree node = new SegmentTree(start, end);
            node.sum = nums[start];
            return node;
        }
        SegmentTree root = new SegmentTree(start, end);
        int mid = (start + end) / 2;
        root.left = buildTree(nums, start, mid);
        root.right = buildTree(nums, mid + 1, end);
        root.sum = root.left.sum + root.right.sum;
        return root;
    }
}


class SegmentTree{
    
    int start, end, sum;
    
    SegmentTree left, right;
    
    public SegmentTree(int start, int end){
        this.start = start;
        this.end = end;
        this.left = null;
        this.right = null;
    }
    
}
